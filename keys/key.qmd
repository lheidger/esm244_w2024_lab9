---
title: 'ESM 244 Lab Week 6: Clustering (k-means & hierarchical)'
format: 
  html:
    code-fold: show
    embed-resources: true
execute:
  message: false
  warning: false
---



In this lab, you'll learn how to do some cluster exploration by partition-based (k-means) and hierarchical clustering.

## Get & attach required packages

Note: You'll probably need to install the last 5 packages here for clustering. 

```{r}
library(tidyverse)
library(janitor)
library(palmerpenguins)

# Packages for cluster analysis:
library(NbClust)
library(cluster)
library(factoextra)
library(dendextend)
library(ggdendro)
```


# Part 1. K-means clustering: 

To practice k-means clustering, we'll use the `penguins` dataset from `palmerpenguins`. 

## Exploratory visualization

First, do some exploratory data visualization. Does it look like there are any obvious clusters? 

```{r}

# Bill length versus depth exploratory plot:
ggplot(penguins) +
  geom_point(aes(x = bill_length_mm, 
                 y = bill_depth_mm),
             size = 3,
             alpha = 0.7)

# Flipper length versus body mass exploratory plot: 
ggplot(penguins) +
  geom_point(aes(x = flipper_length_mm, 
                 y = body_mass_g),
             size = 3,
             alpha = 0.7)
```

## Pseudocode

From lecture, what are some of the considerations we will need to take into account?  Data wrangling, the clustering process?








## Pick the number of clusters

In the lecture, you learned that for k-means clustering you need to specify the number of clusters *a priori*. R **does** have some tools to help you decide, but this should NOT override your judgement based on conceptual or expert understanding. 

Here, we use the `NbClust::NbClust()` function, which "provides 30 indices for determining the number of clusters and proposes to user the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods". See `?NbClust` for more information. 

Basically, it's going to run 30 different ways of evaluating how many clusters it *thinks* exist, then tell you the breakdown of what they decide (e.g. "8 algorithms think that there should be 4 clusters"). 

## Create a complete, scaled version of the data

We are going to do this with *complete cases* - in other words, for the variables we're using to perform k-means clustering on penguins (bill length, bill depth, flipper length, body mass), we are *dropping any observation (row) where any of those are missing*. Keep in mind that this may not be the best option for every scenario - in other cases (e.g. when we have a large proportion of missingness), we may want to impute missing values instead.

```{r}
# Drop rows where any of the four size measurements are missing
penguins_complete <- penguins %>% 
  drop_na(bill_length_mm, bill_depth_mm, body_mass_g, flipper_length_mm)

# Only keep the columns for the four size measurements, then SCALE them
penguins_scale <- penguins_complete %>% 
  select(ends_with("mm"), body_mass_g) %>% 
  scale() # See ?scale for details on scaling

# compare scaled to original vars
summary(penguins_complete)
summary(penguins_scale)
```

Make sure to check out what `penguins_scale` looks like!

## identifying optimal number of clusters

Note that we're only using the four structural size measurement variables from `penguins`, which are columns 3 through 6 (hence the `penguins[3:6]` here). We also specify the minimum and maximum number of clusters we want `NbClust` to consider:

```{r}
# How many clusters do you THINK there should be? 
number_est <- NbClust(penguins_scale, min.nc = 2, max.nc = 10, method = "kmeans")

# Check out the results (just look at the first summary report):
number_est

# By these estimators, 3 is identified as the best number of clusters by the largest number of algorithms (11 / 24)...  could we override this?  here I think it makes sense to stick with 3 (a cluster for each species) and see how it does. 

### knee method
fviz_nbclust(penguins_scale, FUNcluster = kmeans, method = 'wss', k.max = 10)

```

We're going to use 3 clusters and see how it does, though there may be a case here for 2 given that Adelie & chinstrap penguins are pretty similar. 


## Run k-means 

Now that we have complete, scaled data for the four size variables of interest, let's run k-means. You should know the iterative process it's running through from the Week 6 lecture.  

```{r}
penguins_km <- kmeans(penguins_scale, 3, nstart = 25) # kmeans specifying 3 groups to start
```

Check out the outputs in `penguins_km`: 

```{r}
# See what it returns (different elements returned by kmeans function):
penguins_km$size # How many observations assigned to each cluster
penguins_km$cluster # What cluster each observation in penguins_scale is assigned to

# Bind the cluster number to the original data used for clustering, so that we can see what cluster each penguin is assigned to
penguins_cl <- data.frame(penguins_complete, 
                          cluster_no = factor(penguins_km$cluster))

```

``` {r}
# Plot flipper length versus body mass, indicating which cluster each penguin is assigned to (but also showing the actual species):
ggplot(penguins_cl) +
  geom_point(aes(x = flipper_length_mm, 
                 y = body_mass_g, 
                 color = cluster_no,
                 shape = species))

# On your own: do the same, plotting bill dimensions and mapping species & cluster number to the point shape and color aesthetics:

# MAKE
# YOUR 
# GRAPH 
# HERE

```

What do we see from this graph? 

We see that a lot of gentoos are in Cluster 3, a lot of Adelies are in Cluster 2, and A lot of chinstraps are in Cluster 1...but what are the actual counts? Let's find them: 

```{r}
### how well does this clustering match up to species?  Select the species and 
### cluster number vars and make into a continency table
penguins_cl %>% select(species, cluster_no) %>% table()

```

Takeaway: as we see from the graph, *most* chinstraps in their own cluster, and *most* Adelies in a different cluster, and *all* Gentoos are in a distinct cluster by k-means clustering. So this actually does a somewhat decent job of splitting up the three species into different clusters, with some overlap in Cluster 1 between Adelies & chinstraps, which is consistent with what we observed in exploratory data visualization. 

That's your intro to k-means clustering with penguins! 

# Part 2. Cluster analysis: hierarchical

In this section, we'll be performing hierarchical cluster analysis (& making dendrograms) in R. From lecture you should understand agglomerative versus divisive clustering, as well as differences in linkages (complete, single, average). 

We will use the `stats::hclust()` function for agglomerative hierarchical clustering, first checking how well our clusters compare to using WorldBank environmental data (simplified), wb_env.csv.

## Compare hclust results to kmeans using penguins

Start with complete linkage...  First step, create a Euclidean distance matrix
```{r}
peng_dist <- dist(penguins_scale, method = 'euclidean') ### look at upper and diag arguments

# Hierarchical clustering (complete linkage)
peng_hc_complete <- hclust(peng_dist, method = "complete")

# Plot it (base plot):
plot(peng_hc_complete, cex = 0.6, hang = -1)
```

```{r}
# use cutree to slice it into three clusters
peng_cut_hc <- cutree(peng_hc_complete, 3)
table(peng_cut_hc, penguins_complete$species)
```

What if we tried single, average, or ward.D linkage?

How is clustering in this way (either k-means or hierarchical) different from classification using something like binary logistic regression?


## World Bank data: Read in the data, & simplify

Here, we'll read in the WorldBank environmental data (simplified), and keep only the top 20 GHG emitters for this dataset. 

```{r}

# Get the data
wb_env <- read_csv(here::here("data/wb_env.csv"))

# Make sure to take a look at the data:
# View(wb_env)

# Only keep top 20 greenhouse gas emitters (for simplifying visualization here...)
wb_ghg_20 <- wb_env %>% 
  slice_max(ghg, n = 20)

summary(wb_ghg_20)
```

## Pseudocode





## Scale the data

```{r}
# Scale the numeric variables (columns 3:7)
wb_scaled <- wb_ghg_20 %>% 
  select(3:7) %>% 
  scale()
summary(wb_scaled)

# Update to add rownames (country name) from wb_ghg_20
rownames(wb_scaled) <- wb_ghg_20$name

# Check the outcome with View(wb_scaled) - see that the rownames are now the country name (this is useful for visualizing)
```

Great, now we have a simplified, scaled version of the numeric variables, with rownames containing the county name. 

## Find the Euclidean distances

Use the `stats::dist()` function to find the Euclidean distance in multivariate space between the different observations (countries):

```{r}

# Compute dissimilarity values (Euclidean distances):
euc_distance <- dist(wb_scaled, method = "euclidean") ### add diag and upper

# Check out the output:
# euc_distance
```

Note: so like you saw in lecture, you *could* manually create the dendrogram using those distances! But it would take a pretty long time, so instead...

## Perform hierarchical clustering by complete linkage with `stats::hclust()`

The `stats::hclust()` function performs hierarchical clustering, given a dissimilarity matrix (our matrix of euclidean distances), using a linkage that you specify. 

Here, let's use complete linkage (recall from lecture: clusters are merged by the smallest *maximum* distance between two observations in distinct clusters).


```{r}

# Hierarchical clustering (complete linkage)
hc_complete <- hclust(euc_distance, method = "complete" )

# Plot it (base plot):
plot(hc_complete, cex = 0.6, hang = -1)

```

## Now let's do it by single linkage & compare

Let's update the linkage to single linkage (recall from lecture: this means that clusters are merged by the *smallest* distance between observations in separate clusters):

```{r}

# Hierarchical clustering (single linkage)
hc_single <- hclust(euc_distance, method = "single" )

# Plot it (base plot):
plot(hc_single, cex = 0.6, hang = -1)

```

We see that it is a bit different when we change the linkage! But how different? 

### Make a tanglegram to compare dendrograms 

Let's make a **tanglegram** to compare clustering by complete and single linkage! We'll use the `dendextend::tanglegram()` function to make it. 

First, we'll convert to class `dendrogram`, then combine them into a list:

```{r}
# Convert to class dendrogram
dend_complete <- as.dendrogram(hc_complete)
dend_simple <- as.dendrogram(hc_single)
```

Cool, now make a tanglegram: 

```{r}
# Make a tanglegram
tanglegram(dend_complete, dend_simple)
```

That allows us to compare how things are clustered by the different linkages!

Untangling:

```{r}
entanglement(dend_complete, dend_simple) # lower is better
#> [1] 0.3959222

untangle(dend_complete, dend_simple, method = "step1side") %>% 
  entanglement()
# [1] 0.06415907
```

Notice that just because we can get two trees to have horizontal connecting lines, it doesn’t mean these trees are identical (or even very similar topologically):

``` {r}
untangle(dend_complete, dend_simple, method = "step1side") %>% 
   tanglegram(common_subtrees_color_branches = TRUE)
```


## Want to plot your dendrogram with ggplot instead? Me too. 

Here's how you can make your dendrogram with `ggplot` (here, I'll use the complete linkage example stored as `hc_complete`) using `ggdendrogram()`, a `ggplot` wrapper: 

```{r}
ggdendrogram(hc_complete, 
             rotate = TRUE) +
  theme_minimal() +
  labs(x = "Country")

# COOL. Then you can customize w/ usual ggplot tools. 
```

## End Clustering lab
